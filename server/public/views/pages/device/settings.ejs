<!DOCTYPE html>
<html lang="en">
<head>

  <%- include('../../partials/head.ejs') %>

</head>
<body>

  <%- include('../../partials/scripts.ejs') %>
  <%- include('../../partials/device/navbar.ejs') %>

  <%- include('../../partials/modal/confirmation.ejs') %>
  <%- include('../../partials/modal/error.ejs') %>
  <%- include('../../partials/modal/loading.ejs') %>
  <%- include('../../partials/modal/timeout.ejs') %>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>

  <div class="container-fluid">
      <div class="row flex-nowrap">
          <%- include('../../partials/device/sidebar.ejs') %>
          <div class="col py-3">
            <div class="row">
              <div class="col-sm-12 mb-4 mb-sm-0">
                <div class="content-header">
                  <h5>MQTT Available
                    <button id="mqtt_status" type="button" class="btn btn-secondary" disabled></button>
                  </h5>
                </div>
                <div class="col">
                <!--<div class="card">-->
                  <!--<h5 class="card-title">Special title treatment</h5>-->
                  <div class="mb-1 row">
                    <label for="project" class="col-sm-3 col-form-label">Project</label>
                    <div class="col-sm-7">
                      <input type="text" readonly class="form-control-plaintext fw-bold" id="project" value="ND">
                    </div>
                  </div>
                    <div class="mb-1 row">
                      <label for="model" class="col-sm-3 col-form-label">Model</label>
                      <div class="col-sm-7">
                        <input type="text" readonly class="form-control-plaintext fw-bold" id="model" value="ND">
                      </div>
                    </div>
                    <div class="mb-1 row">
                      <label for="fw_version" class="col-sm-3 col-form-label">FW version</label>
                      <div class="col-sm-7">
                        <input type="text" readonly class="form-control-plaintext fw-bold" id="fw_version" value="0.0.0">
                      </div>
                    </div>
                    <div class="mb-4 row">
                      <label for="app_version" class="col-sm-3 col-form-label">App version</label>
                      <div class="col-sm-7">
                        <input type="text" readonly class="form-control-plaintext fw-bold" id="app_version" value="0.0.0">
                      </div>
                    </div>
                    <!--
                    <div class="mb-4 row">
                      <label for="flexCheckDefault" class="col-sm-3 col-form-check">JavaScript</label>
                      <div class="col-sm-7">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckJS" disabled checked>
                      </div>
                    </div>
                    <div class="mb-5 row">
                      <label for="flexCheckDefault" class="col-sm-3 col-form-check">RS485</label>
                      <div class="col-sm-7">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckJS" disabled>
                      </div>
                    </div>
                    -->
                </div>
                <!--</div>-->
              </div>

              <div class="col-sm-12 mb-4 mb-sm-4">
                <div class="btn-group">
                  <label class="input-group-text" for="inputGroupSelect21">release</label>
                  <select class="form-select fwReleaseOption" id="_fwrelease_">
                  </select>
                </div>
              </div>

              <div class="col-sm-12 mb-4 mb-sm-4">
                <div class="card">
                  <div class="card-header">
                    <p>Settings</p>
                  </div>
                  <div class="card-body">
                    <form class="row g-3 needs-validation" novalidate>
                      <div class="col-sm-6">
                        <div class="btn-group">
                          <label class="input-group-text" for="inputGroupSelect31">keepalive</label>
                          <select class="form-select fwKeepaliveOption" id="_fwkeepalive_">
                          </select>
                        </div>
                      </div>
                      <div class="col-sm-6">
                        <div class="btn-group">
                          <label class="input-group-text" for="inputGroupSelect31">logs level</label>
                          <select class="form-select fwLogsLevelOption" id="_fwlogslevel_">
                          </select>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>

              <div class="col-sm-12 mb-4 mb-sm-0">
                <div class="card">
                  <div class="card-header">
                    <p>Actions</p>
                  </div>
                  <div class="card-body">
                    <div class="mb-3 row">
                      <label for="reboot" class="col-sm-8 col-form-label">Reboot</label>
                      <div class="col-sm-4">
                        <button id="reboot" type="button" class="btn btn-primary btn-sm">set</button>
                      </div>
                    </div>
                    <div class="mb-3 row">
                      <label for="staticEmail" class="col-sm-8 col-form-label">Reset</label>
                      <div class="col-sm-4">
                        <button id="reset" type="button" class="btn btn-warning btn-sm">set</button>
                      </div>
                    </div>

                  </div>
                </div>
              </div>

            </div>
          </div>
          <div class="col py-3">
            <div class ="row">
              <div class="col-sm-12 mb-4 mb-sm-4">
                <div class="content-header">
                  <h5>Device available
                    <button id="status" type="button" class="btn btn-secondary" disabled></button
                  </h5>
                </div>
                <div class="mb-1 row">
                  <label for="uptime" class="col-sm-3 col-form-label">Uptime</label>
                  <div class="col-sm-7">
                    <input type="text" readonly class="form-control-plaintext fw-bold" id="uptime" value="0">
                  </div>
                </div>
                <div class="mb-1 row">
                  <label for="tech" class="col-sm-3 col-form-label">Tech</label>
                  <div class="col-sm-7">
                    <input type="text" readonly class="form-control-plaintext fw-bold" id="tech" value="ND">
                  </div>
                </div>
                <div class="mb-5 row">
                  <label for="rssi" class="col-sm-3 col-form-label">RSSI</label>
                  <div class="col-sm-7">
                    <input type="text" readonly class="form-control-plaintext fw-bold" id="rssi" value="99">
                  </div>
                </div>
              </div>
              <div class="col-sm-12 mb-4 mb-sm-4">
                <div class="btn-group">
                  <label class="input-group-text" for="inputGroupSelect21">configuration</label>
                  <select disabled class="form-select fwConfigurationOption" id="_fwconfiguration_">
                  </select>
                </div>
              </div>
              <div class="col-sm-12 mb-4 mb-sm-4">
                <div class="card">
                  <div class="card-header">
                    <p>WiFi</p>
                  </div>
                  <div class="card-body">
                    <form class="row g-3 needs-validation" validate>
                      <div class="col-md-6">
                        <label for="validationCustom01" class="form-label">SSID</label>
                        <input type="text" class="form-control" id="wifissid" value="" required>
                        <div class="valid-feedback">
                          Looks good!
                        </div>
                      </div>
                      <div class="col-md-6">
                        <label for="validationCustom02" class="form-label">Password</label>
                        <input type="text" class="form-control" id="wifipassword" value="" required>
                        <div class="valid-feedback">
                          Looks good!
                        </div>
                      </div>
                      <div class="col-md-4">
                        <button id="wifiget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">get</button>
                        <button id="wifiset" class="btn btn-primary btn-sm" type="submit" onclick="return false;">set</button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
              <div class="col-sm-12 mb-4 mb-sm-4">
                <div class="card">
                  <div class="card-header">
                    <p>MQTT Second Connection</p>
                  </div>
                  <div class="card-body">
                    <form class="row g-3 needs-validation" novalidate>
                      <div class="col-md-10">
                        <label for="validationMQTT01" class="form-label">Host</label>
                        <input type="text" class="form-control" id="mqtt_host" value="" required>
                        <div class="valid-feedback">
                          Looks good!
                        </div>
                      </div>
                      <div class="col-md-2">
                        <label for="validationMQTT02" class="form-label">Port</label>
                        <input type="number" class="form-control" id="mqtt_port" value="" required>
                        <div class="valid-feedback">
                          Looks good!
                        </div>
                      </div>
                      <div class="col-md-6">
                        <label for="validationMQTT03" class="form-label">User</label>
                        <input type="text" class="form-control" id="mqtt_user" value="" required>
                        <div class="valid-feedback">
                          Looks good!
                        </div>
                      </div>
                      <div class="col-md-6">
                        <label for="validationMQTT04" class="form-label">Password</label>
                        <input type="text" class="form-control" id="mqtt_pwd" value="" required>
                        <div class="valid-feedback">
                          Looks good!
                        </div>
                      </div>
                      <div class="col-md-4">
                        <button id="mqttget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">get</button>
                        <button id="mqttset" class="btn btn-primary btn-sm" type="submit" onclick="return false;">set</button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
      </div>
  </div>

  <!-- check link to more import options https://cdnjs.com/libraries/ace -->
  <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.14.0/ace.min.js" integrity="sha512-s57ywpCtz+4PU992Bg1rDtr6+1z38gO2mS92agz2nqQcuMQ6IvgLWoQ2SFpImvg1rbgqBKeSEq0d9bo9NtBY0w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>-->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.14.0/ace.js" integrity="sha512-WYlXqL7GPpZL2ImDErTX0RMKy5hR17vGW5yY04p9Z+YhYFJcUUFRT31N29euNB4sLNNf/s0XQXZfzg3uKSoOdA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>

    var deviceID = api.getDeviceID();
    var project = "";
    var action = "";
    var data = {}
    var loading = $('#modalLoading');
    var keepalive_arr = [
      {value:15,description:"15s"},
      {value:30,description:"30s"},
      {value:60,description:"60s"},
      {value:900,description:"15min"},
      {value:3600,description:"1h"},
      {value:21600,description:"6h"},
      {value:86400,description:"24h"},
    ]

    var logs_level_arr = [
      {value:0,description:"Disabled"},
      {value:1,description:"Verbose"},
      {value:2,description:"Debug"},
      {value:3,description:"Info"},
      {value:4,description:"Warn"},
      {value:5,description:"Error"}
    ]

    $(document).ready(()=>{

      api.getDeviceInfo(deviceID,(err,res)=>{
        if(err) console.log(err.responseJSON.Message)
        else if(res.length > 0){
          console.log(res[0])
          document.querySelector('#project').value = res[0].project;
          document.querySelector('#model').value = res[0].model;
          document.querySelector('#fw_version').value = res[0].fw_version;
          document.querySelector('#app_version').value = res[0].app_version;
          project = res[0].project;

          if(res[0].hasOwnProperty("fw_settings") && res[0].fw_settings != null){
            if(res[0].fw_settings.hasOwnProperty("wifi") && res[0].fw_settings.wifi != null){
              document.querySelector('#wifissid').value = res[0].fw_settings.wifi.ssid;
              document.querySelector('#wifipassword').value = res[0].fw_settings.wifi.pwd;
            }
            if(res[0].fw_settings.hasOwnProperty("mqtt") && res[0].fw_settings.mqtt != null){
              document.querySelector('#mqtt_host').value = res[0].fw_settings.mqtt.host;
              document.querySelector('#mqtt_port').value = res[0].fw_settings.mqtt.port;
              document.querySelector('#mqtt_user').value = res[0].fw_settings.mqtt.user;
              document.querySelector('#mqtt_pwd').value = res[0].fw_settings.mqtt.pass;
            }
          }

          addSelectedOption('#_fwrelease_',res[0].fw_release);
          addOption('#_fwrelease_',"stable");
          addOption('#_fwrelease_',"nightmare");

          if(res[0].fw_settings.hasOwnProperty("keepalive") && res[0].fw_settings.keepalive.hasOwnProperty("period")){
            keepalive_arr.forEach((item,i)=>{
              if(item.value == res[0].fw_settings.keepalive.period)
                addSelectedOption2('#_fwkeepalive_',item.value,item.description);
            });
          }
          keepalive_arr.forEach((item,i)=>{
            addOption2('#_fwkeepalive_',item.value,item.description);
          })

          if(res[0].fw_settings.hasOwnProperty("log") && res[0].fw_settings.log.hasOwnProperty("level")){
            logs_level_arr.forEach((item,i)=>{
              if(item.value == res[0].fw_settings.log.level)
                addSelectedOption2('#_fwlogslevel_',item.value,item.description);
            });
          }
          logs_level_arr.forEach((item,i)=>{
            addOption2('#_fwlogslevel_',item.value,item.description);
          })

          $(".fwReleaseOption").change((event)=>{
            $( ".fwReleaseOption option:selected" ).each(function() {
              let release = $( this ).text();
              api.updateDeviceRelease(deviceID,release,(err,res)=>{
                if(err){
                  $('#error').text("Your request cannot be executed");
                  if(err.hasOwnProperty("sqlMessage"))
                    $('#suggestion').text(err.sqlMessage);
                  else
                    $('#suggestion').text(err);
                  $('#modalError').modal('show');
                }
              });
            });
          });

          $(".fwKeepaliveOption").change((event)=>{
            $( ".fwKeepaliveOption option:selected" ).each(function(item) {
              let keepalive = $( this ).val();
              data = {
                period : keepalive
              }
              sendMessage("fw/keepalive/set",JSON.stringify(data));
            });
          });

          $(".fwLogsLevelOption").change((event)=>{
            $( ".fwLogsLevelOption option:selected" ).each(function() {
              let level = $( this ).val();
              data = {
                level : level
              }
              sendMessage("fw/log/set",JSON.stringify(data));
            });
          });

          api.getMqttCredentials((err,res)=>{

            // connect the client
            if(res != null && res.length > 0){

              client = new Paho.MQTT.Client(Settings.mqtt.host, Settings.mqtt.port, res[0].idclients);

              // set callback handlers
              client.onConnectionLost = onConnectionLost;
              client.onMessageArrived = onMessageArrived;

              client.connect({
                userName:res[0].idusers,
                password:res[0].password,
                onSuccess:onConnect
              });
            }
          })

        }
      })
    });


    $("#modalProceed").click(()=>{
      if(action == "reset"){
        sendMessage("fw/reset/set","1");
      }else if(action == "set_wifi"){
        sendMessage("fw/wifi/set",JSON.stringify(data));
      }
      action = "";
    })

    $("#reboot").click(()=>{
      console.log("reboot button clicked");
      sendMessage("fw/reboot/set","1");
    });

    $("#reset").click(()=>{
      console.log("reset button clicked");
      action = "reset"
      $('#modal_warning_message').text("If you proceed all settings configured on the device will be restored for default settings")
      $('#modalConfirmation').modal('show');
    });

    $("#wifiset").click(()=>{
      let ssid = document.querySelector('#wifissid').value;
      let pwd = document.querySelector('#wifipassword').value;
      data = {
        ssid : ssid,
        pwd : pwd
      }
      action = "set_wifi";
      $('#modal_warning_message').text("If wrong credentials were set, device can become offline after reboot")
      $('#modalConfirmation').modal('show');
    });

    $("#wifiget").click(()=>{
      sendMessage("fw/wifi/get","");
    });

    $("#mqttset").click((event)=>{
      let host = document.querySelector('#mqtt_host').value;
      let port = document.querySelector('#mqtt_port').value;
      let user = document.querySelector('#mqtt_user').value;
      let pwd = document.querySelector('#mqtt_pwd').value;
      data = {
        host : host,
        port : port,
        user : user,
        pass : pwd,
        active : 1
      }
      sendMessage("fw/mqtt/set",JSON.stringify(data));
    });

    $("#mqttget").click(()=>{
      sendMessage("fw/mqtt/get","");
    });

    // called when the client connects
    function onConnect() {
      // Once a connection has been made, make a subscription and send a message.
      let button = document.querySelector('#mqtt_status');
      button.classList.toggle("btn-secondary",false);
      button.classList.toggle("btn-success",true);
      client.subscribe(project+"/"+deviceID+"/#");
    }

    // called when the client loses its connection
    function onConnectionLost(responseObject) {
      button.classList.toggle("btn-secondary",false);
      button.classList.toggle("btn-danger",true);
      if (responseObject.errorCode !== 0) {
        console.log("onConnectionLost:"+responseObject.errorMessage);
      }
    }

    // called when a message arrives
    function onMessageArrived(message) {

      let topic = message.destinationName;
      let payload = message.payloadString;
      //console.log(topic);
      //console.log("payload:"+payload);
      if(topic.includes("status")){
        let button = document.querySelector('#status');
        button.classList.toggle("btn-secondary",false);
        if(payload == "online")
          button.classList.toggle("btn-success",true);
        else
          button.classList.toggle("btn-danger",true);
      }

      if(topic.includes("uptime")){
        let uptime = document.querySelector('#uptime');
        uptime.value = payload;
      }

      if(topic.includes("tech")){
        let tech = document.querySelector('#tech');
        tech.value = payload;
      }

      if(topic.includes("rssi")){
        let rssi = document.querySelector('#rssi');
        rssi.value = payload;
      }

      if(topic.endsWith("wifi")){
        try{
          payload = JSON.parse(payload)
          document.querySelector('#wifissid').value = payload.ssid;
          document.querySelector('#wifipassword').value = payload.pwd;
        }catch(e){ console.log(e)}
        $(document).trigger("closeModalLoading"); // get confirmation
      }

      if(topic.endsWith("mqtt")){
        try{
          payload = JSON.parse(payload)
          document.querySelector('#mqtt_host').value = payload.host;
          document.querySelector('#mqtt_port').value = payload.port;
          document.querySelector('#mqtt_user').value = payload.user;
          document.querySelector('#mqtt_pwd').value = payload.pass;
          $('#modalLoading').modal('hide'); // get confirmation
        }catch(e){ console.log(e);}
        $(document).trigger("closeModalLoading"); // get confirmation
      }

      if(topic.endsWith("set")){
        if(payload == "" || payload == null || payload === 'undefined'){
          $(document).trigger("closeModalLoading"); // set confirmation
        }
      }
    }

    function sendMessage(topic,payload){
      message = new Paho.MQTT.Message(payload);
      message.destinationName = project+"/"+deviceID+"/"+topic;

      loading.modal('show');
      setTimeout(()=>{
        client.send(message);
      },500)

      var timeoutId = setTimeout(()=>{
        loading.modal('hide'); // set confirmation
        $('#modalTimeout').modal('show');
      },15000);

      $(document).on("closeModalLoading", function() {
        loading.modal('hide'); // set confirmation
        clearTimeout(timeoutId);
      });


    }

    function addSelectedOption(id,release){

      $(id).append(`<option select value="${release}">
                                 ${release}
                            </option>`);
    }

    function addOption(id,release){

      $(id).append(`<option value="${release}">
                                 ${release}
                            </option>`);
    }

    function addSelectedOption2(id,value,description){

      $(id).append(`<option select value="${value}">
                                 ${description}
                            </option>`);
    }

    function addOption2(id,value,description){

      $(id).append(`<option value="${value}">
                                 ${description}
                            </option>`);
    }

    // On mqtt connect, topic subscribe, change status device
  </script>
</body>
</html>
