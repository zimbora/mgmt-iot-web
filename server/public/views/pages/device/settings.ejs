<!DOCTYPE html>
<html lang="en">
<head>

  <%- include('../../partials/head.ejs') %>

</head>
<body>

  <%- include('../../partials/scripts.ejs') %>
  <%- include('../../partials/device/navbar.ejs') %>

  <%- include('../../partials/modal/confirmation.ejs') %>
  <%- include('../../partials/modal/error.ejs') %>
  <%- include('../../partials/modal/success.ejs') %>
  <%- include('../../partials/modal/loading.ejs') %>
  <%- include('../../partials/modal/timeout.ejs') %>
  <%- include('../../partials/modal/logsChart.ejs') %>
  <%- include('../../partials/modal/logsList.ejs') %>


  <script src="./assets/js/jquery.min.js"></script>
  <link href="./assets/css/jquery.dataTables.min.css" rel="stylesheet"></script>
  <script src="./assets/js/jquery.dataTables.min.js"></script>
  <script src="./assets/js/ace.js"></script>
  <script src="./assets/js/mqttws31.min.js" type="text/javascript"></script>
  <script type="module" src="./app.mjs"></script>

  <div class="container-fluid">
    <div class="row flex-nowrap">
      <%- include('../../partials/device/sidebar.ejs') %>
      <div class="col">

        <div class="row py-3">
          <div class="col-xs-12 col-sm-6 mb-4 mb-sm-0">
            <div class="content-header">
              <h5>MQTT Available
                <button id="mqtt_status" type="button" class="btn btn-secondary" disabled></button>
              </h5>
            </div>
            <div class="col">
              <div class="mb-1 row">
                <label for="project" class="col-4 col-form-label">Project</label>
                <div class="col-6">
                  <input type="text" readonly class="form-control-plaintext fw-bold" id="project" value="<%=project_name%>">
                </div>
              </div>
              <div class="mb-1 row">
                <label for="model" class="col-4 col-form-label">Model</label>
                <div class="col-6">
                  <input type="text" readonly class="form-control-plaintext fw-bold" id="model" value="<%=model_name%>">
                </div>
              </div>
              <div class="mb-1 row">
                <label for="fw_version" class="col-4 col-form-label">
                  <button class="btn btn-primary btn-sm" type="submit" onclick="Display.showDeviceLogs(`app_version`)">
                    <i class="bi bi-list"></i>
                  </button>
                  version
                </label>
                <div class="col-6">
                  <input type="text" readonly class="form-control-plaintext fw-bold" id="version" value="<%=device.version%>">
                </div>
              </div>
              <div class="mb-4 row">
                <label for="app_version" class="col-4 col-form-label">
                  <button class="btn btn-primary btn-sm" type="submit" onclick="Display.showDeviceLogs(`app_version`)">
                    <i class="bi bi-list"></i>
                  </button>
                  App version
                </label>
                <div class="col-6">
                  <input type="text" readonly class="form-control-plaintext fw-bold" id="app_version" value="<%=device.app_version%>">
                </div>
              </div>
              <div class="btn-group">
                <label class="input-group-text" for="inputGroupSelect21">
                  release
                </label>
                <select class="form-select fwReleaseOption" id="_fwrelease_">
                </select>
                <button id="fotaTrigger" class="btn btn-warning btn-sm" type="button" title="Trigger manual FOTA update check">
                  <i class="bi bi-download"></i> FOTA
                </button>
              </div>
            </div>
          </div>
          <div class="col-xs-12 col-sm-6 mb-4 mb-sm-4">
            <div class="content-header">
              <h5>
                <button class="btn btn-primary btn-sm" type="submit" onclick="Display.showDeviceLogs(`status`)">
                  <i class="bi bi-list"></i>
                </button>
                <%= device.uid %>
                <button id="status" type="button" class="btn btn-secondary" disabled></button
              </h5>
            </div>
            <div class="mb-1 row">
              <label for="uptime" class="col-4 col-form-label">
                <button class="btn btn-light btn-sm" type="submit" onclick="Display.showFwLogs(`uptime`)">
                  <i class="bi bi-list"></i>
                </button>
                Uptime
              </label>
              <div class="col-6">
                <input type="text" readonly class="form-control-plaintext fw-bold" id="uptime" value="<%=fw?.uptime%>">
              </div>
            </div>
            <div class="mb-1 row">
              <label for="tech" class="col-4 col-form-label">
                <button class="btn btn-light btn-sm" type="submit" onclick="Display.showDeviceLogs(`tech`)">
                  <i class="bi bi-list"></i>
                </button>
                Tech
              </label>
              <div class="col-6">
                <input type="text" readonly class="form-control-plaintext fw-bold" id="tech" value="<%=device?.tech%>">
              </div>
            </div>
            <div class="mb-3 row">
              <label for="rssi" class="col-4 col-form-label">
                <button class="btn btn-light btn-sm" type="submit" onclick="Display.showFwLogs(`rssi`)">
                  <i class="bi bi-list"></i>
                </button>
                RSSI
              </label>
              <div class="col-6">
                <input type="text" readonly class="form-control-plaintext fw-bold" id="rssi" value="<%=fw?.rssi%>">
              </div>
            </div>
            <div class="btn-group">
              <label class="input-group-text" for="inputGroupSelect21">Template:</label>
                <select class="form-select templateSelect" id="_template_select_">
                  <option value="">Select a template...</option>
                  <!-- populated by JS -->
                </select>
                <button id="assignTemplate" class="btn btn-primary btn-sm" type="button" title="Assign template to device">
                  <i class="bi bi-check"></i> Assign
                </button>
            </div>
            
            <!-- Show assigned templates -->
            <div class="mt-2" id="assignedTemplates">
              <% if(device.template_id) { %>
                <div class="alert alert-info">
                  <strong>Assigned Template:</strong> 
                  <span id="currentTemplate">Template ID: <%= device.template_id %></span>
                  <button class="btn btn-sm btn-outline-danger ms-2" onclick="unassignTemplate()" title="Remove template assignment">
                    <i class="bi bi-x"></i> Remove
                  </button>
                </div>
              <% } else { %>
                <div class="text-muted" id="noTemplate">No template assigned</div>
              <% } %>
            </div>
          </div>
        </div>

        <div class="row py-3">

          <div class="col-xs-12 col-sm-6 mb-4 mb-sm-4">
            <div class="card">
              <div class="card-header">
                <p>Settings</p>
              </div>
              <div class="card-body">
                <form class="row g-3 needs-validation" novalidate>
                  <div class="col-xs-12 col-sm-6">
                    <div class="btn-group">
                      <label class="input-group-text" for="inputGroupSelect31">keepalive</label>
                      <select class="form-select fwKeepaliveOption" id="_fwkeepalive_">
                      </select>
                      <button id="keepaliveget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">
                        <i class="bi bi-search"></i>
                      </button>
                    </div>
                  </div>
                  <div class="col-xs-12 col-sm-6">
                    <div class="btn-group">
                      <label class="input-group-text" for="inputGroupSelect31">logs level</label>
                      <select <% if(device.settings_ref != null){%> disabled <%}%> class="form-select fwLogsLevelOption" id="_fwlogslevel_">
                      </select>
                      <button id="logLevelget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">
                        <i class="bi bi-search"></i>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>

          <div class="col-xs-12 col-sm-6 mb-4 mb-sm-0">
            <div class="card">
              <div class="card-header">
                <p>Actions</p>
              </div>
              <div class="card-body">
                <div class="mb-3 row">
                  <div class="col-3">
                    <button id="reboot" type="button" class="btn btn-primary btn-sm">Reboot</button>
                  </div>
                  <div class="col-3">
                  </div>
                  <div class="col-3">
                    <button id="reset" type="button" class="btn btn-warning btn-sm">Reset</button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <% if(device.tech?.toLowerCase().includes("wifi")){ %>
            <div class="col-xs-12 col-sm-6 mb-4 mb-sm-4">
              <div class="card">
                <div class="card-header">
                  <p>WiFi</p>
                </div>
                <div class="card-body">
                  <form class="row g-3 needs-validation" validate>
                    <div class="col-md-6">
                      <label for="validationCustom01" class="form-label">SSID</label>
                      <input type="text" class="form-control" id="wifissid" 
                        <% if (device?.remote_settings?.wifi?.ssid != null) { %> value="<%= device.remote_settings.wifi.ssid %>" <% } %>
                        required>
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-6">
                      <label for="validationCustom02" class="form-label">Password</label>
                      <input type="text" class="form-control" id="wifipassword" 
                        <% if (device?.remote_settings?.wifi?.pwd != null) { %> value="<%= device.remote_settings.wifi.pwd %>" <% } %>
                        required>
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-4">
                      <button id="wifiget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">get</button>
                      <button <% if(device.settings_ref != null){%> disabled <%}%> id="wifiset" class="btn btn-warning btn-sm" type="submit" onclick="return false;">set</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          <% }else if(device.tech?.toLowerCase().includes("lte")){ %>
            <div class="col-xs-12 col-sm-6 mb-4 mb-sm-4">
              <div class="card">
                <div class="card-header">
                  <p>LTE</p>
                </div>
                <div class="card-body">
                  <form class="row g-3 needs-validation" validate>
                    <div class="col-md-4">
                      <label for="validationCustom11" class="form-label">APN</label>
                      <input type="text" class="form-control" id="_lte_apn_" 
                        <% if (device?.remote_settings?.lte?.apn != null) { %> value="<%= device.remote_settings.lte.apn %>" <% } %>
                        required>
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-4">
                      <label for="validationCustom12" class="form-label">User</label>
                      <input type="text" class="form-control" id="_lte_user_" 
                        <% if (device?.remote_settings?.lte?.user != null) { %> value="<%= device.remote_settings.lte.user %>" <% } %>
                        >
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-4">
                      <label for="validationCustom13" class="form-label">Password</label>
                      <input type="text" class="form-control" id="_lte_pwd_" 
                        <% if (device?.remote_settings?.lte?.pwd != null) { %> value="<%= device.remote_settings.lte.pwd %>" <% } %>
                        >
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-4">
                      <label for="validationCustom13" class="form-label">Cops</label>
                      <input type="number" class="form-control" id="_lte_cops_" 
                        <% if (device?.remote_settings?.lte?.cops != null) { %> value="<%= device.remote_settings.lte.cops %>" <% } %>
                        >
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-4">
                      <label for="validationCustom13" class="form-label">Band</label>
                      <input type="number" class="form-control" id="_lte_band_" 
                        <% if (device?.remote_settings?.lte?.band != null) { %> value="<%= device.remote_settings.lte.band %>" <% } %>
                        >
                      <div class="valid-feedback">
                        Looks good!
                      </div>
                    </div>
                    <div class="col-md-4">
                      <label for="validationCustom13" class="form-label">Tech</label>
                      <select class="form-select fwTechOption" id="_lte_tech_"
                        <% if (device?.remote_settings?.lte?.tech != null) { %> value="<%= device.remote_settings.lte.tech %>" <% } %>
                        >
                      </select>
                    </div>
                    <div class="col-md-4">
                      <button id="lteget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">get</button>
                      <button <% if(device.settings_ref != null){%> disabled <%}%> id="lteset" class="btn btn-warning btn-sm" type="submit" onclick="return false;">set</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          <% } %>
          <div class="col-xs-12 col-sm-6 mb-4 mb-sm-4">
            <div class="card">
              <div class="card-header">
                <p>MQTT Second Connection</p>
              </div>
              <div class="card-body">
                <form class="row g-3 needs-validation" novalidate>
                  <div class="col-md-10">
                    <label for="validationMQTT01" class="form-label">Host</label>
                    <input type="text" class="form-control" id="mqtt_host" 
                      <% if (device?.remote_settings?.mqtt?.host != null) { %> value="<%= device.remote_settings.mqtt.host %>" <% } %>
                      required >
                    <div class="valid-feedback">
                      Looks good!
                    </div>
                  </div>
                  <div class="col-md-2">
                    <label for="validationMQTT02" class="form-label">Port</label>
                    <input type="number" class="form-control" id="mqtt_port" 
                      <% if (device?.remote_settings?.mqtt?.port != null) { %> value="<%= device.remote_settings.mqtt.port %>" <% } %>
                      required >
                    <div class="valid-feedback">
                      Looks good!
                    </div>
                  </div>
                  <div class="col-md-6">
                    <label for="validationMQTT03" class="form-label">User</label>
                    <input type="text" class="form-control" id="mqtt_user" 
                      <% if (device?.remote_settings?.mqtt?.user != null) { %> value="<%= device.remote_settings.mqtt.user %>" <% } %>
                      required >
                    <div class="valid-feedback">
                      Looks good!
                    </div>
                  </div>
                  <div class="col-md-6">
                    <label for="validationMQTT04" class="form-label">Password</label>
                    <input type="text" class="form-control" id="mqtt_pwd" 
                      <% if (device?.remote_settings?.mqtt?.pass != null) { %> value="<%= device.remote_settings.mqtt.pass %>" <% } %>
                      required >
                    <div class="valid-feedback">
                      Looks good!
                    </div>
                  </div>
                  <div class="col-md-4">
                    <button id="mqttget" class="btn btn-primary btn-sm" type="submit" onclick="return false;">get</button>
                    <button <% if(device.settings_ref != null){%> disabled <%}%> id="mqttset" class="btn btn-warning btn-sm" type="submit" onclick="return false;">set</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>

  <!--<script></script>-->

  <script>

    let device = <%- JSON.stringify(device) %>;
    let mqtt = <%- JSON.stringify(mqtt) %>;
    let project_name = <%- JSON.stringify(project_name) %>;
    let model_name = <%- JSON.stringify(model_name) %>;

    var deviceID = api.getDeviceID();
    var project = "";
    var uid = "";
    var action = "";
    var data = {}
    var loading = $('#modalLoading');
    var keepalive_arr = [
      {value:1,description:"1s"},
      {value:15,description:"15s"},
      {value:30,description:"30s"},
      {value:60,description:"60s"},
      {value:900,description:"15min"},
      {value:3600,description:"1h"},
      {value:21600,description:"6h"},
      {value:86400,description:"24h"},
    ]

    var logs_level_arr = [
      {value:0,description:"Disabled"},
      {value:1,description:"Verbose"},
      {value:2,description:"Debug"},
      {value:3,description:"Info"},
      {value:4,description:"Warn"},
      {value:5,description:"Error"}
    ]

    var lte_tech_arr = [
      {value:0,description:"ND"},
      {value:1,description:"GSM"},
      {value:2,description:"GPRS"},
      {value:3,description:"NB2"},
      {value:4,description:"CATM1"},
      {value:5,description:"AUTO"}
    ]

    var release_arr = [
      "dev",
      "stage",
      "prod",
      "critical"
    ]

    var ctx;
    var table_list;

    $(document).ready(()=>{

      const app = require('./app.mjs');
      table_list = $('#table_list').DataTable();
      ctx = echarts.init(document.getElementById('myChart'));
      /*
      console.log(device);
      console.log(mqtt);
      console.log(project_name);
      console.log(model_name);
      */
      document.querySelector('#app_version').value = device?.app_version || device?.version;
      project = device.project;
      uid = device.uid;

      // Load templates for the project
      loadTemplatesForProject(device.project_id);

      release_arr.forEach((item,i)=>{
        addOption('#_fwrelease_',item, item == device?.accept_release);
      });
            
      let log = device.remote_settings?.log;
      logs_level_arr.forEach((item,i)=>{
        addOptionWithDescription('#_fwlogslevel_',item.value,item.description,item.value == log?.level);
      });

      let keepalive = device.remote_settings?.keepalive;
      keepalive_arr.forEach((item,i)=>{
        addOptionWithDescription('#_fwkeepalive_',item.value,item.description, item.value == keepalive?.period);
      })

      let lte = device.remote_settings?.lte;
      lte_tech_arr.forEach((item,i)=>{
        addOptionWithDescription('#_lte_tech_',item.value,item.description, item.value == lte?.tech);
      })

      $(".fwReleaseOption").change((event)=>{
        $( ".fwReleaseOption option:selected" ).each(function() {
          let release = $( this ).text();
          release = release.trim()
          api.updateDeviceRelease(deviceID,release,(err,res)=>{
            if(err){
              $('#error').text("Your request cannot be executed");
              if(err.hasOwnProperty("sqlMessage"))
                $('#suggestion').text(err.sqlMessage);
              else
                $('#suggestion').text(err);
              $('#modalError').modal('show');
            }
          });
        });
      });

      $(".settingsDeviceRef").change((event)=>{
        $( ".settingsDeviceRef option:selected" ).each(function() {
          let dev_ref = $( this ).val();
          if(dev_ref == "null")
            dev_ref = null;
          api.updateDeviceProjectField(deviceID,"settings_ref",dev_ref,(err,res)=>{
            if(err){
              $('#error').text("Your request cannot be executed");
              if(err.hasOwnProperty("sqlMessage"))
                $('#suggestion').text(err.sqlMessage);
              else
                $('#suggestion').text(err);
              $('#modalError').modal('show');
            }else{
              location.reload();
            }
          });

        });
      });

      $(".fwKeepaliveOption").change((event)=>{
        $( ".fwKeepaliveOption option:selected" ).each(function(item) {
          let keepalive = $( this ).val();
          data = {
            period : keepalive
          }
          sendMessage("settings/keepalive/set",JSON.stringify(data));
        });
      });

      $(".fwLogsLevelOption").change((event)=>{
        $( ".fwLogsLevelOption option:selected" ).each(function() {
          let level = $( this ).val();
          data = {
            level : level
          }
          sendMessage("settings/log/set",JSON.stringify(data));
        });
      });


      // connect the client
      if(mqtt != null){
        if(window.location.protocol == "https:"){
          Settings.mqtt.ssl = true;
          Settings.mqtt.port = 443;
        }

        client = new Paho.MQTT.Client(Settings.mqtt.host, Settings.mqtt.port, mqtt.nick);

        // set callback handlers
        client.onConnectionLost = onConnectionLost;
        client.onMessageArrived = onMessageArrived;

        client.connect({
          userName:mqtt.type,
          password:mqtt.password,
          useSSL:Settings.mqtt.ssl,
          timeout:3,
          onSuccess:onConnect
        });
      }

    });


    $("#modalProceed").click(()=>{
      if(action == "reset"){
        sendMessage("fw/reset/set","1");
      }else if(action == "set_wifi"){
        sendMessage("fw/settings/wifi/set",JSON.stringify(data));
      }else if(action == "set_lte"){
        sendMessage("fw/settings/modem/set",JSON.stringify(data));
      }
      action = "";
    })

    $("#reboot").click(()=>{
      sendMessage("fw/reboot/set","1");
    });

    $("#reset").click(()=>{
      action = "reset"
      $('#modal_warning_message').text("If you proceed all settings configured on the device will be restored for default settings")
      $('#modalConfirmation').modal('show');
    });

    $("#wifiset").click(()=>{
      let ssid = document.querySelector('#wifissid').value;
      let pwd = document.querySelector('#wifipassword').value;
      data = {
        ssid : ssid,
        pwd : pwd
      }
      action = "set_wifi";
      $('#modal_warning_message').text("If wrong credentials were set, device can become offline after reboot")
      $('#modalConfirmation').modal('show');
    });

    $("#wifiget").click(()=>{
      sendMessage("settings/wifi/get","");
    });

    $("#lteset").click(()=>{
      let apn = document.querySelector('#_lte_apn_').value;
      let user = document.querySelector('#_lte_user_').value;
      let pwd = document.querySelector('#_lte_pwd_').value;
      let cops = document.querySelector('#_lte_cops_').value;
      let band = document.querySelector('#_lte_band_').value;
      let tech = document.querySelector('#_lte_tech_').value;
      data = {
        apn : apn,
        user : user,
        pwd : pwd,
        cops : cops,
        band : band,
        tech : tech
      }
      action = "set_lte";
      $('#modal_warning_message').text("If wrong credentials were set, device can become offline after reboot")
      $('#modalConfirmation').modal('show');
    });

    $("#lteget").click(()=>{
      sendMessage("settings/modem/get","");
    });

    $("#mqttset").click((event)=>{
      let host = document.querySelector('#mqtt_host').value;
      let port = document.querySelector('#mqtt_port').value;
      let user = document.querySelector('#mqtt_user').value;
      let pwd = document.querySelector('#mqtt_pwd').value;
      data = {
        host : host,
        port : port,
        user : user,
        pass : pwd,
        active : 1
      }
      sendMessage("settings/mqtt/set",JSON.stringify(data));
    });

    $("#mqttget").click(()=>{
      sendMessage("settings/mqtt/get","");
    });

    $("#keepaliveget").click(()=>{
      sendMessage("settings/keepalive/get","");
    });

    $("#logLevelget").click(()=>{
      sendMessage("settings/log/get","");
    });

    $("#fotaTrigger").click(()=>{
      // enhancements
      // check last version using api
      // display model confirmation with version to update
      // proceed with tigger fota
      // show modal loading
      api.triggerFota(deviceID,(err,res)=>{
        if(err){
          $('#error').text("FOTA trigger failed");
          if(err.hasOwnProperty("sqlMessage"))
            $('#suggestion').text(err.sqlMessage);
          else
            $('#suggestion').text(err);
          $('#modalError').modal('show');
        }else{
          // Show success message - you could add a success modal or notification here
          console.log(res);
          $('#successMsg').text(res);
          $('#modalSuccess').modal('show');
          //console.log("FOTA check triggered successfully:", res);
        }
      });
    });

    // called when the client connects
    function onConnect() {
      // Once a connection has been made, make a subscription and send a message.
      let button = document.querySelector('#mqtt_status');
      button.classList.toggle("btn-secondary",false);
      button.classList.toggle("btn-success",true);
      client.subscribe(project_name+"/"+uid+"/#");
    }

    // called when the client loses its connection
    function onConnectionLost(responseObject) {
      let button = document.querySelector('#mqtt_status');
      button.classList.toggle("btn-secondary",false);
      button.classList.toggle("btn-danger",true);
      if (responseObject.errorCode !== 0) {
        console.log("onConnectionLost:"+responseObject.errorMessage);
      }
    }

    // called when a message arrives
    function onMessageArrived(message) {

      let topic = message.destinationName;
      let payload = message.payloadString;

      let index = topic.indexOf("/");
      if(index > 0){
        // filters project
        topic = topic.substring(index+1);
      }

      index = topic.indexOf("/");
      if(index > 0){
        // filters uid
        topic = topic.substring(index+1);
      }

      if(topic.includes("app"))
        return;
      
      switch(topic){
        case "status":
          {
            let button = document.querySelector('#status');
            button.classList.toggle("btn-secondary",false);
            if(payload == "online")
              button.classList.toggle("btn-success",true);
            else
              button.classList.toggle("btn-danger",true);
            break;
          }
        case "fw":
          {
            try{
              payload = JSON.parse(payload)
              if(payload?.rssi){
                let rssi = document.querySelector('#uptime');
                rssi.value = payload.rssi;
              }
              if(payload?.uptime){
                let uptime = document.querySelector('#uptime');
                uptime.value = payload.uptime;
              }
            }catch(e){ console.log(e);}
            $(document).trigger("closeModalLoading"); // set confirmation
            break;
          } 
        case "tech":
          {
            let tech = document.querySelector('#tech');
            tech.value = payload;
            break;
          }

        case "settings/wifi":
          {
            try{
              payload = JSON.parse(payload)
              document.querySelector('#wifissid').value = payload.ssid;
              document.querySelector('#wifipassword').value = payload.pwd;
            }catch(e){ console.log(e)}
            $(document).trigger("closeModalLoading"); // get confirmation
            break;
          }
        case "settings/modem":
          {
            try{
              payload = JSON.parse(payload)
              document.querySelector('#_lte_apn_').value = payload.apn;
              document.querySelector('#_lte_user_').value = payload.user;
              document.querySelector('#_lte_pwd_').value = payload.pwd;
              document.querySelector('#_lte_cops_').value = payload.cops;
              document.querySelector('#_lte_band_').value = payload.band;
              document.querySelector('#_lte_tech_').value = payload.tech;
            }catch(e){ console.log(e)}
            $(document).trigger("closeModalLoading"); // get confirmation
            break;
          }
        case "settings/mqtt":
          {
            try{
              payload = JSON.parse(payload)
              document.querySelector('#mqtt_host').value = payload.host;
              document.querySelector('#mqtt_port').value = payload.port;
              document.querySelector('#mqtt_user').value = payload.user;
              document.querySelector('#mqtt_pwd').value = payload.pass;
            }catch(e){ console.log(e);}
            $(document).trigger("closeModalLoading"); // get confirmation
            break;
          }
        case "settings/keepalive":
          {
            try{
              payload = JSON.parse(payload)
              var select = document.getElementById("_fwkeepalive_");
              select.value = payload.period;
            }catch(e){ console.log(e);}
            $(document).trigger("closeModalLoading"); // set confirmation
            break;
          }
        case "settings/log":
          {
            try{
              payload = JSON.parse(payload)
              var select = document.getElementById("_fwlogslevel_");
              select.value = payload.level;

            }catch(e){ console.log(e);}
            $(document).trigger("closeModalLoading"); // set confirmation
            break;
          }
      }

      if(topic.endsWith("set")){
        if(payload == "" || payload == null || payload === 'undefined'){
          $(document).trigger("closeModalLoading"); // set confirmation
        }
      }
    }

    function sendMessage(topic,payload){
      message = new Paho.MQTT.Message(payload);
      message.destinationName = project_name+"/"+uid+"/"+topic;
      loading.modal('show');
      setTimeout(()=>{
        client.send(message);
      },500)

      var timeoutId = setTimeout(()=>{
        loading.modal('hide'); // set confirmation
        $('#modalTimeout').modal('show');
      },15000);

      $(document).on("closeModalLoading", function() {
        loading.modal('hide'); // set confirmation
        clearTimeout(timeoutId);
      });
    }

    function addOption(id,value, select){
      if(select){
        $(id).append(`<option selected value="${value}">${value}</option>`);
      }else{
        $(id).append(`<option value="${value}">${value}</option>`);
      }
    }

    function addOptionWithDescription(id,value,description, select){
      if(select){
        $(id).append(`<option selected value="${value}">${description}</option>`);
      }else{
        $(id).append(`<option value="${value}">${description}</option>`);
      }
    }

    // Template management functions
    function loadTemplatesForProject(projectId) {
      if (!projectId) return;
      
      api.template.list(projectId, function(err, templates) {
        if (err) {
          console.error('Error fetching templates:', err);
          return;
        }
        
        const select = document.getElementById('_template_select_');
        select.innerHTML = '<option value="">Select a template...</option>';
        
        templates.forEach(template => {
          const opt = document.createElement('option');
          opt.value = template.id;
          opt.textContent = `${template.tag} - ${template.name}`;
          if (template.id == device.template_id) {
            opt.selected = true;
          }
          select.appendChild(opt);
        });
        
        // Update current template display
        updateCurrentTemplateDisplay(templates);
      });
    }

    function updateCurrentTemplateDisplay(templates) {
      const currentTemplateEl = document.getElementById('currentTemplate');
      if (device.template_id && currentTemplateEl) {
        const template = templates.find(t => t.id == device.template_id);
        if (template) {
          currentTemplateEl.textContent = `${template.tag} - ${template.name}`;
        }
      }
    }

    $("#assignTemplate").click(() => {
      const templateSelect = document.getElementById('_template_select_');
      const templateId = templateSelect.value;
      
      if (!templateId) {
        alert('Please select a template to assign');
        return;
      }
      
      assignTemplateToDevice(templateId);
    });

    function assignTemplateToDevice(templateId) {
      api.updateDeviceField(deviceID, "template_id", templateId, (err, res) => {
        if (err) {
          $('#error').text("Failed to assign template");
          if (err.hasOwnProperty("sqlMessage"))
            $('#suggestion').text(err.sqlMessage);
          else
            $('#suggestion').text(err);
          $('#modalError').modal('show');
        } else {
          // Update the device object and refresh display
          device.template_id = templateId;
          location.reload(); // Reload to show updated template assignment
        }
      });
    }

    function unassignTemplate() {
      if (confirm('Are you sure you want to remove the template assignment?')) {
        api.updateDeviceField(deviceID, "template_id", null, (err, res) => {
          if (err) {
            $('#error').text("Failed to remove template");
            if (err.hasOwnProperty("sqlMessage"))
              $('#suggestion').text(err.sqlMessage);
            else
              $('#suggestion').text(err);
            $('#modalError').modal('show');
          } else {
            device.template_id = null;
            location.reload(); // Reload to show updated template assignment
          }
        });
      }
    }

    // On mqtt connect, topic subscribe, change status device
  </script>
</body>
</html>
