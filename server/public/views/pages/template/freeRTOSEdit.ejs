<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../../partials/head.ejs') %>
  
  <style>
    td {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 150px;
    }
    
    .topic-tabs .nav-link {
      border-radius: 0;
    }
    
    .topic-tabs .nav-link.active {
      background-color: #007bff;
      color: white;
    }

    .small-btn {
      padding: 0rem 0.5rem;
      height: 1.5rem;
    }

    .small-icon {
      font-size: 0.75rem;
    }
    
    .switch {
      position: relative;
      display: inline-block;
      width: 34px; /* Reduced width */
      height: 20px; /* Reduced height */
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 10px; /* Rounded corners */
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 14px; /* Reduced size of the toggle */
      width: 14px; /* Reduced size of the toggle */
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%; /* Rounded toggle */
    }

    input:checked + .slider {
      background-color: #2196F3;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
      -webkit-transform: translateX(14px);
      -ms-transform: translateX(14px);
      transform: translateX(14px);
    }
  </style>
</head>
<body>

  <%- include('../../partials/scripts.ejs') %>
  <%- include('../../partials/project/navbar.ejs') %>

  <%- include('../../partials/modal/confirmation.ejs') %>
  <%- include('../../partials/modal/error.ejs') %>
  <%- include('../../partials/modal/success.ejs') %>

  <link href="./assets/css/jquery.dataTables.min.css" rel="stylesheet">
  <script src="./assets/js/jquery.dataTables.min.js"></script>
  <script src="./assets/js/fontawesome.js"></script>

  <div class="container-fluid">
    <div class="row flex-nowrap">
      <%- include('../../partials/template/sidebar.ejs') %>
      <div id="loading"></div>
      <div class="col py-3">
        <div class="content-header">
          <div class="d-flex justify-content-between align-items-center">
            <h3><%= project?.name %> - Edit freeRTOS2 Template: <%= template?.tag || 'Unknown' %></h3>
          </div>
        </div>

        <!-- FreeRTOS Template Topics Section -->
        <div class="row mt-4">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                <h5 class="card-title">MQTT Topics Configuration</h5>
              </div>
              <div id="topicsTemplate"></div>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>

  <!-- Edit Topic Modal -->
  <div class="modal fade" id="editTopicModal" tabindex="-1" aria-labelledby="editTopicModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editTopicModalLabel">Edit Topic</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="topicForm">
            <input type="hidden" id="entryId" name="entryId">
            
            <!-- Topic Path -->
            <div class="mb-3">
              <label for="topicPath" class="form-label">Topic Path</label>
              <input type="text" class="form-control" id="topicPath" name="topicPath" placeholder="sensors/temperature" required>
              <div class="form-text">Enter the MQTT topic path (e.g., sensors/temperature, status/online)</div>
            </div>

            <!-- Topic Title -->
            <div class="mb-3">
              <label for="topicTitle" class="form-label">Title</label>
              <input type="text" class="form-control" id="topicTitle" name="topicTitle" placeholder="Enter topic title" required>
            </div>

            <!-- Data Type -->
            <div class="mb-3">
              <label for="type" class="form-label">Data Type</label>
              <select class="form-select" id="type" name="type" required>
                <option value="string">String</option>
                <option value="integer">Integer</option>
                <option value="float">Float</option>
                <option value="boolean">Boolean</option>
                <option value="json">JSON</option>
              </select>
            </div>

            <!-- Read/Write Properties -->
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="readable" name="readable">
                  <label class="form-check-label" for="readable">Readable</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="writable" name="writable">
                  <label class="form-check-label" for="writable">Writable</label>
                </div>
              </div>
            </div>

            <!-- Publish Interval -->
            <div class="mb-3">
              <label for="publishInterval" class="form-label">Publish Interval (seconds)</label>
              <select class="form-select" id="publishInterval" name="publishInterval">
                <option value="0">No automatic publishing</option>
                <option value="5">5 Seconds</option>
                <option value="10">10 Seconds</option>
                <option value="30">30 Seconds</option>
                <option value="60">1 Minute</option>
                <option value="300">5 Minutes</option>
                <option value="900">15 Minutes</option>
                <option value="1800">30 Minutes</option>
                <option value="3600">1 Hour</option>
                <option value="14400">4 Hours</option>
                <option value="21600">6 Hours</option>
                <option value="43200">12 Hours</option>
                <option value="86400">24 Hours</option>
              </select>
            </div>

            <!-- Default Data -->
            <div class="mb-3">
              <label for="defaultData" class="form-label">Default Data</label>
              <input type="text" class="form-control" id="defaultData" name="defaultData" placeholder="Enter default data">
              <div class="form-text">Enter the default value for this topic</div>
            </div>

          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="saveTopic()">Save Changes</button>
        </div>
      </div>
    </div>
  </div>

  <script type="module" src="./app.mjs"></script>
  
  <script>
    var templateId = '<%= template?.id || "" %>';
    var projectId = '<%= project?.id || "" %>';
    var templateTopics = [];
    var topicsTable = null;

    $(document).ready(function () {
      // Validate that we have the required IDs
      if (!templateId || !projectId) {
        $('#loading').html('<div class="alert alert-danger">Error: Missing template or project information.</div>');
        return;
      }
      
      loadFreeRTOSTemplateTopics();
    });

    function loadFreeRTOSTemplateTopics() {
      const contentContainer = $('#topicsTemplate');
      contentContainer.empty();

      contentContainer.html(`
          <div class="mt-3">
            <h6>Topics for template
            <button class="btn btn-primary ms-2 small-btn" 
              onclick="newTopic()">
              <i class="bi bi-plus small-icon"></i> Add Topic
            </button>
            </h6>
            <div class="table-responsive">
              <table id="topicsTable" class="table table-striped table-bordered">
                <thead>
                  <tr>
                    <th>Actions</th>
                    <th>Topic</th>
                    <th>Title</th>
                    <th>Type</th>
                    <th>Readable</th>
                    <th>Writable</th>
                    <th>Publish Interval</th>
                    <th>Default Data</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
      `);

      // Initialize DataTable
      topicsTable = $('#topicsTable').DataTable({
        pageLength: 10,
        order: [[1, 'asc']], // Sort by topic name
        columnDefs: [
          { orderable: false, targets: 0 } // Disable sorting for action column
        ]
      });

      // Load topics from API
      api.template.freertos.getTopics(templateId, (err, topics) => {
        if (err) {
          console.error('Error loading template topics:', err);
          $('#loading').html('<div class="alert alert-danger">Error loading template topics</div>');
          return;
        }

        templateTopics = topics || [];
        
        // Add topics to table
        templateTopics.forEach(topic => {
          addTopicToTable(topic);
        });
      });
    }

    function addTopicToTable(topic) {
      const actions = `
        <button class="btn btn-sm btn-outline-primary me-1" 
                onclick="editTopic(${topic.id})" 
                title="Edit">
          <i class="bi bi-pencil"></i>
        </button>
        <button class="btn btn-sm btn-outline-danger" 
                onclick="deleteTopic(${topic.id})" 
                title="Delete">
          <i class="bi bi-trash"></i>
        </button>
      `;

      const readableIcon = topic.description?.attributes?.readable ? 
        '<i class="bi bi-check-circle text-success"></i>' : 
        '<i class="bi bi-x-circle text-muted"></i>';
      
      const writableIcon = topic.description?.attributes?.writable ? 
        '<i class="bi bi-check-circle text-success"></i>' : 
        '<i class="bi bi-x-circle text-muted"></i>';

      const intervalText = topic.publishInterval > 0 ? 
        `${topic.publishInterval}s` : 'Manual';

      const defaultDataText = topic.defaultData?.value ? 
        JSON.stringify(topic.defaultData.value) : '-';

      topicsTable.row.add([
        actions,
        topic.topic || '-',
        topic.description?.attributes?.title || '-',
        topic.description?.attributes?.type || '-',
        readableIcon,
        writableIcon,
        intervalText,
        defaultDataText
      ]).draw();
    }

    function newTopic() {
      // Clear form
      document.getElementById('topicForm').reset();
      document.getElementById('entryId').value = '';
      document.getElementById('defaultData').value = '{"value":""}';
      
      // Set defaults
      document.getElementById('readable').checked = true;
      document.getElementById('writable').checked = false;
      document.getElementById('publishInterval').value = '0';
      
      // Update modal title
      document.getElementById('editTopicModalLabel').textContent = 'Add New Topic';
      
      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('editTopicModal'));
      modal.show();
    }

    function editTopic(topicId) {
      const topic = templateTopics.find(t => t.id === topicId);
      if (!topic) {
        alert('Topic not found');
        return;
      }

      // Populate form
      document.getElementById('entryId').value = topic.id;
      document.getElementById('topicPath').value = topic.topic || '';
      document.getElementById('topicTitle').value = topic.description?.attributes?.title || '';
      document.getElementById('type').value = topic.description?.attributes?.type || 'string';
      document.getElementById('readable').checked = topic.description?.attributes?.readable || false;
      document.getElementById('writable').checked = topic.description?.attributes?.writable || false;
      document.getElementById('publishInterval').value = topic.publishInterval || 0;
      
      // Handle default data
      if (topic.defaultData?.value !== undefined) {
        document.getElementById('defaultData').value = 
          typeof topic.defaultData.value === 'object' ? 
          JSON.stringify(topic.defaultData.value) : 
          topic.defaultData.value;
      } else {
        document.getElementById('defaultData').value = '';
      }

      // Update modal title
      document.getElementById('editTopicModalLabel').textContent = 'Edit Topic';
      
      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('editTopicModal'));
      modal.show();
    }

    function saveTopic() {
      const entryId = document.getElementById('entryId').value;
      const topicPath = document.getElementById('topicPath').value.trim();
      const topicTitle = document.getElementById('topicTitle').value.trim();
      const type = document.getElementById('type').value;
      const readable = document.getElementById('readable').checked;
      const writable = document.getElementById('writable').checked;
      const publishInterval = parseInt(document.getElementById('publishInterval').value);
      const defaultDataValue = document.getElementById('defaultData').value.trim();

      // Validation
      if (!topicPath || !topicTitle) {
        alert('Topic path and title are required');
        return;
      }

      // Parse default data
      let defaultData = null;
      if (defaultDataValue) {
        try {
          if (type === 'json') {
            defaultData = { value: JSON.parse(defaultDataValue) };
          } else if (type === 'boolean') {
            defaultData = { value: defaultDataValue.toLowerCase() === 'true' };
          } else if (type === 'integer') {
            defaultData = { value: parseInt(defaultDataValue) };
          } else if (type === 'float') {
            defaultData = { value: parseFloat(defaultDataValue) };
          } else {
            defaultData = { value: defaultDataValue };
          }
        } catch (e) {
          alert('Invalid default data format');
          return;
        }
      }

      const topicData = {
        topic: topicPath,
        description: {
          attributes: {
            type: type,
            title: topicTitle,
            readable: readable,
            writable: writable,
          }
        },
        defaultData: defaultData,
        publishInterval: publishInterval,
      };

      if (entryId) {
        // Update existing topic
        api.template.freertos.updateTopic(templateId, entryId, topicData, (err, response) => {
          handleSaveResponse(err, response, 'Topic updated successfully');
        });
      } else {
        // Add new topic
        api.template.freertos.addTopic(templateId, topicData, (err, response) => {
          handleSaveResponse(err, response, 'Topic added successfully');
        });
      }
    }

    function handleSaveResponse(err, response, successMessage) {
      if (err) {
        console.error('Error saving topic:', err);
        $('#error').text('Error saving topic');
        $('#suggestion').text(typeof err === 'string' ? err : 'An unexpected error occurred');
        $('#modalError').modal('show');
      } else {
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('editTopicModal'));
        if (modal) {
          modal.hide();
        }

        // Show success message
        $("#successHeader").text("Success");
        $('#successMsg').text(successMessage);
        $('#modalSuccess').modal('show');
        
        // Reload topics
        setTimeout(() => {
          loadFreeRTOSTemplateTopics();
        }, 1000);
      }
    }

    function deleteTopic(topicId) {
      if (!confirm('Are you sure you want to delete this topic?')) {
        return;
      }

      api.template.freertos.deleteTopic(templateId, topicId, (err, response) => {
        if (err) {
          console.error('Error deleting topic:', err);
          $('#error').text('Error deleting topic');
          $('#suggestion').text(typeof err === 'string' ? err : 'An unexpected error occurred');
          $('#modalError').modal('show');
        } else {
          $("#successHeader").text("Topic Deleted");
          $('#successMsg').text('Topic has been deleted successfully');
          $('#modalSuccess').modal('show');
          
          // Reload topics
          setTimeout(() => {
            loadFreeRTOSTemplateTopics();
          }, 1000);
        }
      });
    }

  </script>
</body>
</html>