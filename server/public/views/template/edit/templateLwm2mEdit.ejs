<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../../partials/head.ejs') %>
  
  <style>
    .editable {
      cursor: pointer;
      border: none;
      background: transparent;
      width: 100%;
    }
    .editable:hover {
      background-color: #f8f9fa;
    }
    .editable:focus {
      background-color: white;
      border: 1px solid #007bff;
    }
    td {
      vertical-align: middle;
    }
    .badge-success-custom {
      background-color: #28a745;
      color: white;
      display: none;
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
    }
    .object-tab {
      cursor: pointer;
    }
    .resource-table {
      display: none;
    }
    .resource-table.active {
      display: table;
    }
    .nav-tabs .nav-link.active {
      background-color: #007bff;
      color: white;
    }
  </style>
</head>
<body>

  <%- include('../../partials/scripts.ejs') %>
  <%- include('../../partials/navbar.ejs') %>

  <%- include('../../partials/modal/confirmation.ejs') %>
  <%- include('../../partials/modal/error.ejs') %>
  <%- include('../../partials/modal/success.ejs') %>

  <!-- Success Badge -->
  <div id="successBadge" class="badge badge-success-custom badge-lg">
    <span id="badgeMessage">Resource created successfully</span>
  </div>

  <div class="container-fluid">
    <div class="row flex-nowrap">
      <%- include('../../partials/sidebar.ejs') %>
      
      <div class="col py-3">
        <div class="content-header">
          <h1>Edit LWM2M Template</h1>
          <p class="text-muted">Template ID: <span id="templateId"><%= templateId %></span></p>
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" class="text-center">
          <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p>Loading resources...</p>
        </div>

        <!-- Main content -->
        <div id="mainContent" style="display: none;">
          
          <!-- Object Tabs -->
          <ul class="nav nav-tabs" id="objectTabs" role="tablist">
            <!-- Tabs will be populated by JS -->
          </ul>

          <!-- Tab Content -->
          <div class="tab-content" id="objectTabContent">
            <!-- Tables will be populated by JS -->
          </div>

        </div>
      </div>
    </div>
  </div>

  <!-- Add Resource Modal -->
  <div class="modal fade" id="addResourceModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add New Resource</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="addResourceForm" novalidate>
          <div class="modal-body">
            
            <!-- Object ID -->
            <div class="mb-3">
              <label for="objectId" class="form-label">Object ID</label>
              <input type="number" class="form-control" id="objectId" name="objectId" required>
              <div class="invalid-feedback">Please enter a valid object ID.</div>
            </div>

            <!-- Object Instance ID -->
            <div class="mb-3">
              <label for="objectInstanceId" class="form-label">Object Instance ID (optional)</label>
              <input type="number" class="form-control" id="objectInstanceId" name="objectInstanceId">
            </div>

            <!-- Resource ID -->
            <div class="mb-3">
              <label for="resourceId" class="form-label">Resource ID (optional)</label>
              <input type="number" class="form-control" id="resourceId" name="resourceId">
            </div>

            <!-- Description -->
            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <div class="row">
                <div class="col-md-6">
                  <label for="descType" class="form-label small">Type</label>
                  <select class="form-control" id="descType" name="descType" required>
                    <option value="">Select Type</option>
                    <option value="string">String</option>
                    <option value="float">Float</option>
                    <option value="integer">Integer</option>
                    <option value="boolean">Boolean</option>
                  </select>
                </div>
                <div class="col-md-6">
                  <label for="descTitle" class="form-label small">Title</label>
                  <input type="text" class="form-control" id="descTitle" name="descTitle" required>
                </div>
              </div>
              <div class="row mt-2">
                <div class="col-md-4">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="descReadable" name="descReadable">
                    <label class="form-check-label" for="descReadable">Readable</label>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="descWritable" name="descWritable">
                    <label class="form-check-label" for="descWritable">Writable</label>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="descObservable" name="descObservable">
                    <label class="form-check-label" for="descObservable">Observable</label>
                  </div>
                </div>
              </div>
              <div class="invalid-feedback">Please fill in the required description fields.</div>
            </div>

            <!-- Default Data -->
            <div class="mb-3">
              <label for="defaultData" class="form-label">Default Data (optional)</label>
              <textarea class="form-control" id="defaultData" name="defaultData" rows="3" placeholder='{"value": "your_value_here"}'></textarea>
              <small class="form-text text-muted">Enter JSON format: {"value": value_or_object}</small>
            </div>

            <!-- Observe -->
            <div class="mb-3">
              <label for="observe" class="form-label">Observe (optional)</label>
              <select class="form-control" id="observe" name="observe">
                <option value="">Not Set</option>
                <option value="1">True</option>
                <option value="0">False</option>
              </select>
            </div>

            <!-- Read Interval -->
            <div class="mb-3">
              <label for="readInterval" class="form-label">Read Interval (optional)</label>
              <input type="number" class="form-control" id="readInterval" name="readInterval" placeholder="Interval in seconds">
            </div>

          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Create Resource</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    let templateId = '<%= templateId %>';
    let currentResources = [];
    let currentObjects = {};

    // Load resources on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadTemplateResources();
    });

    function loadTemplateResources() {
      api.getTemplateResources(templateId, (err, resources) => {
        if (err) {
          $('#loadingIndicator').hide();
          $('#error').text('Error loading template resources');
          $('#suggestion').text(err.message || err);
          $('#modalError').modal('show');
          return;
        }

        currentResources = resources || [];
        organizeResourcesByObject();
        renderObjectTabs();
        renderResourceTables();
        
        $('#loadingIndicator').hide();
        $('#mainContent').show();
      });
    }

    function organizeResourcesByObject() {
      currentObjects = {};
      currentResources.forEach(resource => {
        if (!currentObjects[resource.objectId]) {
          currentObjects[resource.objectId] = [];
        }
        currentObjects[resource.objectId].push(resource);
      });
    }

    function renderObjectTabs() {
      const tabsContainer = $('#objectTabs');
      tabsContainer.empty();
      
      const objectIds = Object.keys(currentObjects).sort((a, b) => parseInt(a) - parseInt(b));
      
      objectIds.forEach((objectId, index) => {
        const isActive = index === 0 ? 'active' : '';
        const tabHtml = `
          <li class="nav-item" role="presentation">
            <button class="nav-link ${isActive}" id="object-${objectId}-tab" data-bs-toggle="tab" 
                    data-bs-target="#object-${objectId}" type="button" role="tab">
              Object ${objectId}
            </button>
          </li>
        `;
        tabsContainer.append(tabHtml);
      });
    }

    function renderResourceTables() {
      const contentContainer = $('#objectTabContent');
      contentContainer.empty();
      
      const objectIds = Object.keys(currentObjects).sort((a, b) => parseInt(a) - parseInt(b));
      
      objectIds.forEach((objectId, index) => {
        const isActive = index === 0 ? 'show active' : '';
        const resources = currentObjects[objectId];
        
        const tableHtml = `
          <div class="tab-pane fade ${isActive}" id="object-${objectId}" role="tabpanel">
            <div class="d-flex justify-content-between align-items-center my-3">
              <h4>Object ${objectId} Resources</h4>
              <button type="button" class="btn btn-primary btn-sm" onclick="showAddResourceModal(${objectId})">
                <i class="fas fa-plus"></i> Add Resource
              </button>
            </div>
            
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead class="table-dark">
                  <tr>
                    <th>Actions</th>
                    <th>Instance ID</th>
                    <th>Resource ID</th>
                    <th>Description</th>
                    <th>Default Data</th>
                    <th>Observe</th>
                    <th>Read Interval</th>
                  </tr>
                </thead>
                <tbody>
                  ${resources.map(resource => renderResourceRow(resource)).join('')}
                </tbody>
              </table>
            </div>
          </div>
        `;
        contentContainer.append(tableHtml);
      });
    }

    function renderResourceRow(resource) {
      const descriptionStr = typeof resource.description === 'string' ? 
        resource.description : JSON.stringify(resource.description, null, 2);
      const defaultDataStr = resource.defaultData ? 
        (typeof resource.defaultData === 'string' ? resource.defaultData : JSON.stringify(resource.defaultData, null, 2)) : '';
      
      return `
        <tr data-resource-id="${resource.id}">
          <td>
            <button type="button" class="btn btn-danger btn-sm me-1" onclick="deleteResource(${resource.id})" title="Delete">
              <i class="fas fa-trash"></i>
            </button>
            <button type="button" class="btn btn-success btn-sm" onclick="saveResource(${resource.id})" title="Save">
              <i class="fas fa-save"></i>
            </button>
          </td>
          <td>${resource.objectInstanceId || ''}</td>
          <td>${resource.resourceId || ''}</td>
          <td>
            <textarea class="editable form-control" data-field="description" rows="2">${descriptionStr}</textarea>
          </td>
          <td>
            <textarea class="editable form-control" data-field="defaultData" rows="2">${defaultDataStr}</textarea>
          </td>
          <td>
            <select class="editable form-control" data-field="observe">
              <option value="" ${resource.observe === null ? 'selected' : ''}>Not Set</option>
              <option value="1" ${resource.observe === 1 ? 'selected' : ''}>True</option>
              <option value="0" ${resource.observe === 0 ? 'selected' : ''}>False</option>
            </select>
          </td>
          <td>
            <input type="number" class="editable form-control" data-field="readInterval" value="${resource.readInterval || ''}" />
          </td>
        </tr>
      `;
    }

    function showAddResourceModal(objectId) {
      // Reset form
      document.getElementById('addResourceForm').reset();
      document.getElementById('objectId').value = objectId;
      
      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('addResourceModal'));
      modal.show();
    }

    // Handle form submission for adding resource
    document.getElementById('addResourceForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const resourceData = {
        objectId: parseInt(formData.get('objectId')),
        objectInstanceId: formData.get('objectInstanceId') ? parseInt(formData.get('objectInstanceId')) : null,
        resourceId: formData.get('resourceId') ? parseInt(formData.get('resourceId')) : null,
        description: {
          attributes: {
            type: formData.get('descType'),
            title: formData.get('descTitle'),
            readable: formData.get('descReadable') === 'on',
            writable: formData.get('descWritable') === 'on',
            observable: formData.get('descObservable') === 'on'
          }
        },
        defaultData: formData.get('defaultData') ? JSON.parse(formData.get('defaultData')) : null,
        observe: formData.get('observe') ? parseInt(formData.get('observe')) : null,
        readInterval: formData.get('readInterval') ? parseInt(formData.get('readInterval')) : null
      };

      // Validate required fields
      if (!resourceData.description.attributes.type || !resourceData.description.attributes.title) {
        $('#error').text('Validation Error');
        $('#suggestion').text('Type and Title are required fields in description');
        $('#modalError').modal('show');
        return;
      }

      api.addResource(templateId, resourceData, (err, res) => {
        const modal = bootstrap.Modal.getInstance(document.getElementById('addResourceModal'));
        modal.hide();
        
        if (err) {
          $('#error').text('Error adding resource');
          $('#suggestion').text(err.message || err);
          $('#modalError').modal('show');
        } else {
          showSuccessBadge('Resource created successfully');
          loadTemplateResources(); // Reload to show new resource
        }
      });
    });

    function deleteResource(resourceId) {
      $('#modal_message').text(`Are you sure you want to delete this resource?`);
      $('#modalConfirmation').modal('show');
      
      // Handle confirmation
      $('#modalProceed').off('click').on('click', function() {
        api.deleteResource(templateId, resourceId, (err, res) => {
          if (err) {
            $('#error').text('Error deleting resource');
            $('#suggestion').text(err.message || err);
            $('#modalError').modal('show');
          } else {
            showSuccessBadge('Resource deleted successfully');
            loadTemplateResources(); // Reload to remove deleted resource
          }
        });
      });
    }

    function saveResource(resourceId) {
      const row = document.querySelector(`tr[data-resource-id="${resourceId}"]`);
      const editableFields = row.querySelectorAll('.editable');
      
      const resourceData = {};
      editableFields.forEach(field => {
        const fieldName = field.dataset.field;
        let value = field.value.trim();
        
        if (fieldName === 'description' || fieldName === 'defaultData') {
          try {
            value = value ? JSON.parse(value) : null;
          } catch (e) {
            $('#error').text('JSON Parse Error');
            $('#suggestion').text(`Invalid JSON format in ${fieldName} field`);
            $('#modalError').modal('show');
            return;
          }
        } else if (fieldName === 'observe' || fieldName === 'readInterval') {
          value = value ? parseInt(value) : null;
        }
        
        if (value !== '' && value !== null) {
          resourceData[fieldName] = value;
        }
      });

      api.updateResource(templateId, resourceId, resourceData, (err, res) => {
        if (err) {
          $('#error').text('Error updating resource');
          $('#suggestion').text(err.message || err);
          $('#modalError').modal('show');
        } else {
          showSuccessBadge('Resource updated successfully');
        }
      });
    }

    function showSuccessBadge(message) {
      $('#badgeMessage').text(message);
      $('#successBadge').fadeIn().delay(2000).fadeOut();
    }
  </script>

</body>
</html>